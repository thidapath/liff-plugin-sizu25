{
  /**
   * Accept suggestions on provider defined characters.
   * Defaults to true.
   */
  // "editor.acceptSuggestionOnCommitCharacter": true,
  /**
   * Accept suggestions on ENTER.
   * Defaults to 'on'.
   */
  // "editor.acceptSuggestionOnEnter": "on",
  /**
   * Options for auto closing brackets.
   * Defaults to language defined behavior.
   */
  // "editor.autoClosingBrackets": "languageDefined",
  /**
   * Options for auto closing quotes.
   * Defaults to language defined behavior.
   */
  // "editor.autoClosingQuotes": "languageDefined",
  /**
   * Controls whether the editor should automatically adjust the indentation
   * when users type, paste, move or indent lines.
   * Defaults to 'full'.
   */
  // "editor.autoIndent": "full",
  /**
   * Show code lens
   * Defaults to true.
   */
  // "editor.codeLens": true,
  /**
   * Enable inline color decorators and color picker rendering.
   */
  // "editor.colorDecorators": true,
  /**
   * Enable custom contextmenu.
   * Defaults to true.
   */
  // "editor.contextmenu": true,
  /**
   * Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'.
   * Defaults to 'blink'.
   */
  // "editor.cursorBlinking": "blink",
  /**
   * Control the cursor style, either 'block' or 'line'.
   * Defaults to 'line'.
   */
  // "editor.cursorStyle": "line",
  /**
   * Control the width of the cursor when cursorStyle is set to 'line'
   */
  // "editor.cursorWidth": 2,
  /**
   * Controls whether 'editor.tabSize' and 'editor.insertSpaces' will be
   * automatically detected when a file is opened based on the file contents.
   * Defaults to true.
   */
  // "editor.detectIndentation": true,
  /**
   * Controls if the editor should allow to move selections via drag and drop.
   * Defaults to false.
   */
  // "editor.dragAndDrop": false,
  /**
   * Copying without a selection copies the current line.
   */
  // "editor.emptySelectionClipboard": true,
  /**
   * Enable code folding
   * Defaults to true.
   */
  // "editor.folding": true,
  /**
   * Selects the folding strategy. 'auto' uses the strategies contributed for the current document, 'indentation' uses the indentation based folding strategy.
   * Defaults to 'auto'.
   */
  // "editor.foldingStrategy": "auto",
  /**
   * The font family
   */
  "editor.fontFamily": "Menlo, Cascadia Code, Consolas, Liberation Mono, monospace",
  /**
   * Enable font ligatures.
   * Defaults to false.
   */
  // "editor.fontLigatures": false,
  /**
   * The font size
   */
  "editor.fontSize": 18,
  "editor.lineHeight": 28
  /**
   * The font weight
   */
  // "editor.fontWeight": "normal",
  /**
   * Enable format on paste.
   * Defaults to false.
   */
  // "editor.formatOnPaste": false,
  /**
   * Enable format on save.
   * Defaults to true.
   */
  // "editor.formatOnSave": true,
  /**
   * Enable format on type.
   * Defaults to false.
   */
  // "editor.formatOnType": false,
  /**
   * Enable the rendering of the glyph margin.
   * Defaults to true in vscode and to false in monaco-editor.
   */
  // "editor.glyphMargin": false,
  /**
   * Enable highlighting of the active indent guide.
   * Defaults to true.
   */
  // "editor.highlightActiveIndentGuide": true,
  /**
   * Configure the editor's hover.
   */
  // "editor.hover": { "enabled": true, "delay": 300, "sticky": true },
  /**
   * insert spaces when pressing Tab.  This setting is overridden based on the
   * file contents when 'editor.detectIndentation' is on.
   */
  // "editor.insertSpaces": true,
  /**
   * The letter spacing
   */
  // "editor.letterSpacing": 0,
  /**
   * Control the behavior and rendering of the code action lightbulb.
   */
  // "editor.lightbulb": { "enabled": true },
  /**
   * The width reserved for line decorations (in px).
   * Line decorations are placed between line numbers and the editor content.
   * You can pass in a string in the format floating point followed by "ch". e.g. 1.3ch.
   * Defaults to 10.
   */
  // "editor.lineDecorationsWidth": 10,
  /**
   * The line height
   */
  // "editor.lineHeight": 18,
  /**
   * Control the rendering of line numbers.
   * If it is a function, it will be invoked when rendering a line number and the return value will be rendered.
   * Otherwise, if it is a truey, line numbers will be rendered normally (equivalent of using an identity function).
   * Otherwise, line numbers will not be rendered.
   * Defaults to true.
   */
  // "editor.lineNumbers": "on",
  /**
   * Control the width of line numbers, by reserving horizontal space for rendering at least an amount of digits.
   * Defaults to 5.
   */
  // "editor.lineNumbersMinChars": 5,
  /**
   * Enable detecting links and making them clickable.
   * Defaults to true.
   */
  // "editor.links": true,
  /**
   * Enable highlighting of matching brackets. Can be: 'always', 'near', 'never'.
   * Defaults to 'always'.
   */
  // "editor.matchBrackets": "always",
  /**
   * Control the behavior and rendering of the minimap.
   */
  // "editor.minimap": { "enabled": false },
  /**
   * Merge overlapping selections.
   * Defaults to true
   */
  // "editor.multiCursorMergeOverlapping": true,
  /**
   * The modifier to be used to add multiple cursors with the mouse.
   * Defaults to 'alt'
   */
  // "editor.multiCursorModifier": "alt",
  /**
   * Enable semantic occurrences highlight.
   * Defaults to true.
   */
  // "editor.occurrencesHighlight": true,
  /**
   * Controls if a border should be drawn around the overview ruler.
   * Defaults to `true`.
   */
  // "editor.overviewRulerBorder": true,
  /**
   * The number of vertical lanes the overview ruler should render.
   * Defaults to 2.
   */
  // "editor.overviewRulerLanes": 2,
  /**
   * Parameter hint options.
   */
  // "editor.parameterHints": { "enabled": true, "cycle": false },
  /**
   * Enable quick suggestions (shadow suggestions)
   * Defaults to true.
   */
  // "editor.quickSuggestions": true,
  /**
   * Quick suggestions show delay (in ms)
   * Defaults to 10 (ms)
   */
  // "editor.quickSuggestionsDelay": 10,
  /**
   * Enable rendering of control characters.
   * Defaults to false.
   */
  // "editor.renderControlCharacters": false,
  /**
   * Enable rendering of indent guides.
   * Defaults to true.
   */
  // "editor.renderIndentGuides": true,
  /**
   * Enable rendering of current line highlight.
   * Defaults to all.
   */
  // "editor.renderLineHighlight": "all",
  /**
   * Enable rendering of whitespace.
   * Defaults to none.
   */
  // "editor.renderWhitespace": "none",
  /**
   * Render vertical lines at the specified columns.
   * Defaults to empty array.
   */
  // "editor.rulers": [],
  /**
   * Enable that scrolling can go beyond the last column by a number of columns.
   * Defaults to 5.
   */
  // "editor.scrollBeyondLastColumn": 5,
  /**
   * Enable that scrolling can go one screen size after the last line.
   * Defaults to true.
   */
  // "editor.scrollBeyondLastLine": true,
  /**
   * Enable Linux primary clipboard.
   * Defaults to true.
   */
  // "editor.selectionClipboard": true,
  /**
   * Enable selection highlight.
   * Defaults to true.
   */
  // "editor.selectionHighlight": true,
  /**
   * Should the corresponding line be selected when clicking on the line number?
   * Defaults to true.
   */
  // "editor.selectOnLineNumbers": true,
  /**
   * Controls whether the fold actions in the gutter stay always visible or hide unless the mouse is over the gutter.
   * Defaults to 'mouseover'.
   */
  // "editor.showFoldingControls": "mouseover",
  /**
   * Controls fading out of unused variables.
   */
  // "editor.showUnused": true,
  /**
   * Enable that the editor animates scrolling to a position.
   * Defaults to false.
   */
  // "editor.smoothScrolling": false,
  /**
   * Enable snippet suggestions. Default to 'true'.
   */
  // "editor.snippetSuggestions": "top",
  /**
   * Performance guard: Stop rendering a line after x characters.
   * Defaults to 10000.
   * Use -1 to never stop rendering
   */
  // "editor.stopRenderingLineAfter": -1,
  /**
   * Suggest options.
   */
  // "editor.suggest": { "filterGraceful": true, "showWords": false },
  /**
   * Enable the suggestion box to pop-up on trigger characters.
   * Defaults to true.
   */
  // "editor.suggestOnTriggerCharacters": true,
  /**
   * Controls how suggestions are pre-selected when showing the suggest list.
   */
  // "editor.suggestSelection": "first",
  /**
   * The number of spaces a tab is equal to. This setting is overridden based
   * on the file contents when 'editor.detectIndentation' is on.
   */
  // "editor.tabSize": 2,
  /**
   * Inserting and deleting whitespace follows tab stops.
   */
  // "editor.useTabStops": true,
  /**
   * A string containing the word separators used when doing word navigation.
   * Defaults to "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?"
   */
  // "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  /**
   * Control the wrapping of the editor.
   * When `wordWrap` = "off", the lines will never wrap.
   * When `wordWrap` = "on", the lines will wrap at the viewport width.
   * When `wordWrap` = "wordWrapColumn", the lines will wrap at `wordWrapColumn`.
   * When `wordWrap` = "bounded", the lines will wrap at min(viewport width, wordWrapColumn).
   * Defaults to "off".
   */
  // "editor.wordWrap": "on",
  /**
   * Control the wrapping of the editor.
   * When `wordWrap` = "off", the lines will never wrap.
   * When `wordWrap` = "on", the lines will wrap at the viewport width.
   * When `wordWrap` = "wordWrapColumn", the lines will wrap at `wordWrapColumn`.
   * When `wordWrap` = "bounded", the lines will wrap at min(viewport width, wordWrapColumn).
   * Defaults to 80.
   */
  // "editor.wordWrapColumn": 0,
  /**
   * Control indentation of wrapped lines. Can be: 'none', 'same', 'indent' or 'deepIndent'.
   * Defaults to 'same' in vscode and to 'none' in monaco-editor.
   */
  // "editor.wrappingIndent": "same",
  /**
   * Controls the algorithm that computes wrapping points. Can be: 'simple', 'advanced'.
   * Defaults to 'simple'.
   */
  // "editor.wrappingStrategy": "simple",
  /**
   * Prettier - Print semicolons at the ends of statements.
   */
  // "prettier.semi": true,
  /**
   * Prettier - Use single quotes instead of double quotes.
   */
  // "prettier.singleQuote": true,
  /**
   * Prettier - Specify the number of spaces per indentation-level.
   */
  // "prettier.tabWidth": 2,
  /**
   * Prettier - Indent lines with tabs instead of spaces.
   */
  // "prettier.useTabs": false,
  /**
   * Controls whether the terminal cursor blinks.
   * Defaults to false.
   */
  // "terminal.integrated.cursorBlinking": false,
  /**
   * Controls the style of terminal cursor.
   * Can be: 'block' (default), 'line' or 'underline'.
   */
  // "terminal.integrated.cursorStyle": "block",
  /**
   * Controls the width of the cursor when 'terminal.integrated.cursorStyle' is set to 'line'.
   * Defaults to 2.
   */
  // "terminal.integrated.cursorWidth": 2,
  /**
   * Controls the font size in pixels of the terminal.
   * Defaults to 12.
   */
  // "terminal.integrated.fontSize": 12,
  /**
   * Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
   * Defaults to 1.
   */
  // "terminal.integrated.lineHeight": 1,
  /**
   * When set, the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
   * - 1: Do nothing and use the standard theme colors.
   * - 4.5: WCAG AA compliance (minimum) (default).
   * - 7: WCAG AAA compliance (enhanced).
   * - 21: White on black or black on white.
   */
  // "terminal.integrated.minimumContrastRatio": 4.5
}
